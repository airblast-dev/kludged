use crate::keyboards::{rk68::Rk68, Keyboard};

use std::io::Write;

const SUBSYSTEMS: &[&str] = &["usb", "hidraw"];

pub trait UdevRule {
    fn rule<W: Write>(w_buf: W) -> std::io::Result<()>;
}
impl<Kb> UdevRule for Kb
where
    Kb: Keyboard,
{
    /// Write the rules into the provided buffer.
    ///
    /// Returns an error if the provided buffer returns an error on write.
    fn rule<W: Write>(mut w_buf: W) -> std::io::Result<()> {
        let vid = Self::VID;
        let pid = Self::PID;

        writeln!(w_buf)?;

        for (i, subsystem) in SUBSYSTEMS.iter().enumerate() {
            write!(
                w_buf,
                "\
                SUBSYSTEM==\"{subsystem}\", \
                ATTRS{{idVendor}}==\"{vid:04x}\", \
                ATTRS{{idProduct}}==\"{pid:04x}\", \
                MODE=\"0666\"\
                ",
            )?;

            if i != SUBSYSTEMS.len() - 1 {
                writeln!(w_buf)?;
            }
        }

        Ok(())
    }
}

/// Write all of the rules into the provided buffer.
///
/// Returns an error if the provided buffer returns an error on write. Before the rules are
/// written, an informational text is prepended containing the version information.
pub fn rules<W: Write>(w: &mut W) -> std::io::Result<()> {
    write!(
        w,
        "\
            # KLUDGED_VERSION={}\n\
            # The rules defined here are generated by kludged.\n\
            # Manually modifiying this file is not recommended.\n\
            # To refresh the rules to the latest version run \"sudo kludged udev\".\n\
        ",
        env!("CARGO_PKG_VERSION")
    )?;

    Rk68::rule(w)?;

    Ok(())
}
