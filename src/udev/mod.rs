use crate::keyboards::{rk68::Rk68, Keyboard};

const SUBSYSTEMS: &[&str] = &["usb", "hidraw"];

pub trait UdevRule {
    fn rule() -> String;
}
impl<Kb> UdevRule for Kb
where
    Kb: Keyboard,
{
    fn rule() -> String {
        use std::fmt::Write;
        let vid = Self::VID;
        let pid = Self::PID;

        let mut buf = String::new();

        for (i, subsystem) in SUBSYSTEMS.iter().enumerate() {
            buf.write_fmt(format_args!(
                "\
                SUBSYSTEM==\"{subsystem}\", \
                ATTRS{{idVendor}}==\"{vid:04x}\", \
                ATTRS{{idProduct}}==\"{pid:04x}\", \
                MODE=\"0666\"\
                "
            ))
            .expect("Error formatting udev rules.");

            if i != SUBSYSTEMS.len() - 1 {
                buf.push('\n');
            }
        }

        buf
    }
}

use std::io::Write;
pub fn rules<W: Write>(w: &mut W) -> std::io::Result<()> {
    write!(
        w,
        "\
            # KLUDGED_VERSION={}\n\
            # The rules defined here are generated by kludged.\n\
            # Manually modifiying this file is not recommended.\n\
            # To refresh the rules to the latest version run \"sudo kludged udev\".\n\
        ",
        env!("CARGO_PKG_VERSION")
    )?;
    w.write_all(Rk68::rule().as_bytes())?;

    Ok(())
}
